package com.TheVedBlogApp.blog.services.Impl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.TheVedBlogApp.blog.config.AppConstants;
import com.TheVedBlogApp.blog.entities.Role;
import com.TheVedBlogApp.blog.entities.User;
import com.TheVedBlogApp.blog.exceptions.ResourceNotFoundException;
import com.TheVedBlogApp.blog.payloads.UserDto;
import com.TheVedBlogApp.blog.repositories.RoleRepo;
import com.TheVedBlogApp.blog.repositories.UserRepo;
import com.TheVedBlogApp.blog.services.UserService;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepo userRepo;
	@Autowired
	public ModelMapper modelMapper;

	@Autowired
	private PasswordEncoder passwordEncoder;
	@Autowired
	private RoleRepo roleRepo;

	public UserDto createUser(UserDto userdto) {
		User user = this.dtoTouser(userdto);
		User saveuser = this.userRepo.save(user);
		return this.userTodto(saveuser);
	}

	public UserDto Updateuser(UserDto userdto, Integer userid) {
		User user = this.userRepo.findById(userid)
				.orElseThrow(() -> new ResourceNotFoundException("User", "id", userid));
		user.setU_name(userdto.getU_name());
		user.setEmail(userdto.getEmail());
		user.setU_about(userdto.getU_about());
		user.setU_password(userdto.getU_password());

		User updateUser = this.userRepo.save(user);
		UserDto userTodto1 = this.userTodto(updateUser);
		return userTodto1;
	}

	public UserDto getuserById(Integer userid) {
		User user = this.userRepo.findById(userid)
				.orElseThrow(() -> new ResourceNotFoundException("User", "id", userid));

		return this.userTodto(user);
	}

	public List<UserDto> getAllUsers() {

		List<User> users = this.userRepo.findAll();
		List<UserDto> userdto = users.stream().map(user -> this.userTodto(user)).collect(Collectors.toList());

		return userdto;
	}

	public void deleteUser(Integer userid) {

		User user = this.userRepo.findById(userid)
				.orElseThrow(() -> new ResourceNotFoundException("User", "id", userid));

		this.userRepo.delete(user);
	}

	private User dtoTouser(UserDto userdto) {

//Approach 1
//		User user = new User();
//		user.setU_id(userdto.getU_id());
//		user.setU_name(userdto.getU_name());
//		user.setU_email(userdto.getU_email());
//		user.setU_password(userdto.getU_password());
//		user.setU_about(userdto.getU_about());

//Approch 2.
		User user = this.modelMapper.map(userdto, User.class);

		return user;

	}

	private UserDto userTodto(User user) {

		UserDto userDto = this.modelMapper.map(user, UserDto.class);
//		UserDto userdto = new UserDto();
//		userdto.setU_id(user.getU_id());
//		userdto.setU_name(user.getU_name());
//		userdto.setU_email(user.getU_email());
//		userdto.setU_password(user.getU_password());
//		userdto.setU_about(user.getU_about());

		return userDto;

	}

	@Override
	public UserDto registerNewUser(UserDto userDto) {
		User user = this.modelMapper.map(userDto, User.class);
		user.setU_password(this.passwordEncoder.encode(user.getU_password()));

		Role role = this.roleRepo.findById(AppConstants.NORMAL_USER).get();
		user.getRoles().add(role);
		User save = this.userRepo.save(user);

		return this.modelMapper.map(save, UserDto.class);
	}
}
