package com.TheVedBlogApp.blog.controllers;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StreamUtils;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.TheVedBlogApp.blog.config.AppConstants;
import com.TheVedBlogApp.blog.payloads.ApiRespnse;
import com.TheVedBlogApp.blog.payloads.PostDto;
import com.TheVedBlogApp.blog.payloads.PostResponse;
import com.TheVedBlogApp.blog.services.FileService;
import com.TheVedBlogApp.blog.services.PostService;

@RestController
@RequestMapping("/api/")
public class PostController<ImageResponse> {

	@Autowired
	private PostService postservice;
	@Autowired
	private FileService fileService;

	@Value("${project.image}")
	private String path;

	// Post Create User
	@PostMapping("/user/{userId}/category/{categoryId}/posts")
	public ResponseEntity<PostDto> CreatePost(@RequestBody PostDto postDto, @PathVariable Integer userId,
			@PathVariable Integer categoryId) {

		PostDto createPost = this.postservice.CreatePost(postDto, userId, categoryId);
		return new ResponseEntity<PostDto>(createPost, HttpStatus.CREATED);
	}

	/**
	 * 
	 * @param userId
	 * @return
	 */
// get by user
	@GetMapping("/user/{userId}/posts")
	public ResponseEntity<List<PostDto>> getPostsByUser(@PathVariable Integer userId) {

		List<PostDto> posts = this.postservice.getPostsByUser(userId);

		return new ResponseEntity<List<PostDto>>(posts, HttpStatus.OK);

	}

//	get Posts By Category
	@GetMapping("/category/{categoryId}/posts")
	public ResponseEntity<List<PostDto>> getPostsByCategory(@PathVariable Integer categoryId) {

		List<PostDto> posts = this.postservice.getPostsByUser(categoryId);

		return new ResponseEntity<List<PostDto>>(posts, HttpStatus.OK);

	}

//get all posts pagination
	@GetMapping("/postspagination")
	public ResponseEntity<List<PostDto>> getAllPostByPagination(
			@RequestParam(value = "pageNumber", defaultValue = "1", required = false) Integer pageNumber,
			@RequestParam(value = "pageSize", defaultValue = "5", required = false) Integer pageSize) {

		List<PostDto> allposts = this.postservice.getAllPostByPagination(pageNumber, pageSize);

		return new ResponseEntity<List<PostDto>>(allposts, HttpStatus.OK);

	}

//get post
	@GetMapping("/posts/{postId}")
	public ResponseEntity<PostDto> getPostByID(@PathVariable Integer postId) {

		PostDto postDto = this.postservice.getPostByID(postId);

		return new ResponseEntity<PostDto>(postDto, HttpStatus.OK);

	}

//delete post
	@DeleteMapping("/posts/{postId}")
	public ResponseEntity<ApiRespnse> deletePost(@PathVariable("postId") Integer postId) {

		this.postservice.deletePost(postId);

		return new ResponseEntity<ApiRespnse>(new ApiRespnse("Post Deleted Successfully", true), HttpStatus.OK);
	}

// PUT -(Update) Post
	@PutMapping("/posts/{postId}")
	public ResponseEntity<PostDto> updatePost(@Valid @RequestBody PostDto postDto,
			@PathVariable("postId") Integer postId) {

		PostDto updatedpost = this.postservice.updatePost(postDto, postId);
		return ResponseEntity.ok(updatedpost);

	}

//get AllPost
	@GetMapping("/posts")
	public ResponseEntity<List<PostDto>> getAllPost() {

		List<PostDto> allposts = this.postservice.getAllPost();

		return new ResponseEntity<List<PostDto>>(allposts, HttpStatus.OK);

	}

// PostResponse		
	@GetMapping("/postResponse")
	public ResponseEntity<PostResponse> getAllPostResponse(
			@RequestParam(value = "pageNumber", defaultValue = "1", required = false) Integer pageNumber,
			@RequestParam(value = "pageSize", defaultValue = "5", required = false) Integer pageSize) {

		PostResponse postResponse = this.postservice.getAllPostResponse(pageNumber, pageSize);

		return new ResponseEntity<PostResponse>(postResponse, HttpStatus.OK);

	}
	// getAllPostSortBy

	@GetMapping("/postsortby")
	public ResponseEntity<PostResponse> getAllPostSortBy(
			@RequestParam(value = "pageNumber", defaultValue = AppConstants.PAGE_NUMBER, required = false) Integer pageNumber,
			@RequestParam(value = "pageSize", defaultValue = AppConstants.PAGE_SIZE, required = false) Integer pageSize,
			@RequestParam(value = "sortBy", defaultValue = AppConstants.SORT_BY, required = false) String sortBy,
			@RequestParam(value = "sortDir", defaultValue = AppConstants.SORT_DIR, required = false) String sortDir) {

		PostResponse postResponse = this.postservice.getAllPostResponse(pageNumber, pageSize);

		return new ResponseEntity<PostResponse>(postResponse, HttpStatus.OK);

	}

//	@GetMapping("/posts/search/{keywords}")
//	public ResponseEntity<List<PostDto>> searchPostByTitle(@PathVariable("keywords") String keywords) {
//
//		List<PostDto> results = this.postservice.searchPosts(keywords);
//
//		return new ResponseEntity<List<PostDto>>(results, HttpStatus.OK);
//
//	}
	@PostMapping("/post/image/upload/{postId}")
	public ResponseEntity<PostDto> uploadPostImage(@RequestParam("image") MultipartFile image,
			@PathVariable Integer postId) throws IOException {
		PostDto postDto = this.postservice.getPostByID(postId);

		String fileName = this.fileService.uploadImage(path, image);
		postDto.setP_imagename(fileName);
		ResponseEntity<PostDto> updatePost = this.updatePost(postDto, postId);
		return new ResponseEntity<PostDto>(HttpStatus.OK);

	}
	@GetMapping("/posts/image/{imageName}")
	public void downloadImage(@PathVariable("imageName") String imageName,HttpServletResponse response) throws IOException {
		
		InputStream resource = this.fileService.gerResource(path, imageName);
		response.setContentType(MediaType.IMAGE_JPEG_VALUE);
		StreamUtils.copy(resource, response.getOutputStream());
		
	}
	

}
