package com.TheVedBlogApp.blog.exceptions;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import com.TheVedBlogApp.blog.payloads.ApiRespnse;

@RestControllerAdvice
public class GlobalExceptionHandler {

	@ExceptionHandler(ResourceNotFoundException.class)
	public ResponseEntity<ApiRespnse> resouceNOTfoundException(ResourceNotFoundException ex){
		String msg=ex.getMessage();
		ApiRespnse apiRespnse=new ApiRespnse(msg,false);
		
		return new ResponseEntity<ApiRespnse>(apiRespnse,HttpStatus.NOT_FOUND);
	}
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public ResponseEntity<Map<String,String>> handleMethodArgumentNotValidException(MethodArgumentNotValidException e, Object FieldError){
		Map<String,String> map=new HashMap<>();
			e.getBindingResult().getAllErrors().forEach((error)->{
				String fieldname = ((FieldError)error).getField();
				String message=error.getDefaultMessage();
				map.put(fieldname, message);
			});	
		return new ResponseEntity<Map<String,String>>(map,HttpStatus.BAD_REQUEST);
		
	}
	
	
	@ExceptionHandler(ApiException.class)
	public ResponseEntity<ApiRespnse> handleApiException(ApiException ex){
		String msg=ex.getMessage();
		ApiRespnse apiRespnse=new ApiRespnse(msg,false);
		
		return new ResponseEntity<ApiRespnse>(apiRespnse,HttpStatus.NOT_FOUND);
	}
	
	
	
}
